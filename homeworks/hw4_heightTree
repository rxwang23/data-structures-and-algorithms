from LinkedBinaryTree import LinkedBinaryTree


def is_height_balanced(bin_tree):
    """
    returns true if the tree satisfies the height-balance property, false otherwise
    """
    def is_subtree_balanced(root):
        """
        returns tuple of (if balanced, height)
        """
        if root is None:
            return True, 0
        else:
            left_balanced, left_height = is_subtree_balanced(root.left)
            right_balanced, right_height = is_subtree_balanced(root.right)
            if not left_balanced and right_balanced:
                return False, -1
            if abs(left_height - right_height) <= 1:
                return True, max(left_height, right_height) + 1
            else:
                return False, -1

    return is_subtree_balanced(bin_tree.root)[0]

#
# def main():
#     # a = LinkedBinaryTree.Node(5)
#     # b = LinkedBinaryTree.Node(1)
#     # c = LinkedBinaryTree.Node(9, a, b)
#     # d = LinkedBinaryTree.Node(2, c)
#     # e = LinkedBinaryTree.Node(8)
#     # f = LinkedBinaryTree.Node(4)
#     # g = LinkedBinaryTree.Node(7, e, f)
#     # h = LinkedBinaryTree.Node(3, d, g)
#
#     a = LinkedBinaryTree.Node(5)
#     b = LinkedBinaryTree.Node(1)
#     c = LinkedBinaryTree.Node(8, a, b)
#     d = LinkedBinaryTree.Node(9)
#     e = LinkedBinaryTree.Node(4)
#     f = LinkedBinaryTree.Node(7, c, e)
#     g = LinkedBinaryTree.Node(2, d)
#     h = LinkedBinaryTree.Node(3, g, f)
#
#     tree = LinkedBinaryTree(h)
#     for i in tree:
#         print(i)
#     print(is_height_balanced(tree))
#
# main()
