from DoublyLinkedList import DoublyLinkedList

# assume all strings are not empty


class CompactString:
    def __init__(self, orig_str):
        """
        Initializes a CompactString object representing the string given in orig_str
        """
        self.data = DoublyLinkedList()
        count = 1
        for i in range(1, len(orig_str)):
            if orig_str[i] == orig_str[i - 1]:
                count += 1
            else:
                self.data.add_last((orig_str[i - 1], count))
                count = 1
        if len(orig_str) != 0:
            self.data.add_last((orig_str[len(orig_str) - 1], count))

    def __add__(self, other):
        """
        :param other: type CompactString
        :return: CompactString object that represent concatenation of self and other
        """
        added_str = CompactString("")
        pointer = self.data.header.next
        while pointer.next.data is not None:
            added_str.data.add_last(pointer.data)
            pointer = pointer.next
        if pointer.data[0] == other.data.header.next.data[0]:
            added_str.data.add_last(
                (pointer.data[0], pointer.data[1] + other.data.header.next.data[1]))
            pointer = other.data.header.next.next
        else:
            added_str.data.add_last(pointer.data)
            pointer = other.data.header.next
        while pointer.data is not None:
            added_str.data.add_last(pointer.data)
            pointer = pointer.next
        return added_str

    def __lt__(self, other):
        """
        :param other: type CompactString
        :return: true if"f self is lexicographically less than other
        """
        pointer1 = self.data.header.next
        pointer2 = other.data.header.next
        while pointer1.data == pointer2.data and pointer1.data is not None:
            pointer1 = pointer1.next
            pointer2 = pointer2.next
        if pointer1.data is None and pointer2.data is None:
            return False
        elif pointer1.data is not None and pointer2.data is None:
            return False
        elif pointer1.data is None and pointer2.data is not None:
            return True
        else:
            if pointer1.data[0] == pointer2.data[0]:
                if pointer1.data[1] > pointer2.data[1]:
                    if pointer2.next.data is None:
                        return False
                    return pointer1.data[0] < pointer2.next.data[0]
                else:
                    if pointer1.next.data is None:
                        return True
                    return pointer1.next.data[0] < pointer2.data[0]
            return pointer1.data[0] < pointer2.data[0]

    def __le__(self, other):
        """
        :param other: type CompactString
        :return: true if"f self is lexicographically less than or equal to other
        """
        pointer1 = self.data.header.next
        pointer2 = other.data.header.next
        while pointer1.data == pointer2.data and pointer1.data is not None:
            pointer1 = pointer1.next
            pointer2 = pointer2.next
        if pointer1.data is None and pointer2.data is None:
            return True
        elif pointer1.data is None and pointer2.data is not None:
            return True
        elif pointer1.data is not None and pointer2.data is None:
            return False
        else:
            if pointer1.data[0] == pointer2.data[0]:
                if pointer1.data[1] > pointer2.data[1]:
                    if pointer2.next.data is None:
                        return False
                    return pointer1.data[0] < pointer2.next.data[0]
                else:
                    if pointer1.next.data is None:
                        return True
                    return pointer1.next.data[0] < pointer2.data[0]
            return pointer1.data[0] < pointer2.data[0]

    def __gt__(self, other):
        """
        :param other: type CompactString
        :return: true if"f self is lexicographically greater than other
        """
        pointer1 = self.data.header.next
        pointer2 = other.data.header.next
        while pointer1.data == pointer2.data and pointer1.data is not None:
            pointer1 = pointer1.next
            pointer2 = pointer2.next
        if pointer1.data is None and pointer2.data is None:
            return False
        elif pointer1.data is None and pointer2.data is not None:
            return False
        elif pointer1.data is not None and pointer2.data is None:
            return True
        else:
            if pointer1.data[0] == pointer2.data[0]:
                if pointer1.data[1] > pointer2.data[1]:
                    if pointer2.next.data is None:
                        return True
                    return pointer1.data[0] > pointer2.next.data[0]
                else:
                    if pointer1.next.data is None:
                        return False
                    return pointer1.next.data[0] > pointer2.data[0]
            return pointer1.data[0] > pointer2.data[0]
        
    def __ge__(self, other):
        """
        :param other: type CompactString
        :return: true if"f self is lexicographically greater than or equal other
        """
        pointer1 = self.data.header.next
        pointer2 = other.data.header.next
        while pointer1.data == pointer2.data and pointer1.data is not None:
            pointer1 = pointer1.next
            pointer2 = pointer2.next
        if pointer1.data is None and pointer2.data is None:
            return True
        elif pointer1.data is None and pointer2.data is not None:
            return False
        elif pointer1.data is not None and pointer2.data is None:
            return True
        else:
            if pointer1.data[0] == pointer2.data[0]:
                if pointer1.data[1] > pointer2.data[1]:
                    if pointer2.next.data is None:
                        return True
                    return pointer1.data[0] > pointer2.next.data[0]
                else:
                    if pointer1.next.data is None:
                        return False
                    return pointer1.next.data[0] > pointer2.data[0]
            return pointer1.data[0] > pointer2.data[0]

    def __repr__(self):
        """
        :return: string representation of self
        """
        return_str = ""
        pointer = self.data.header.next
        while pointer.data is not None:
            return_str += pointer.data[0] * pointer.data[1]
            pointer = pointer.next
        return return_str

#
# s1 = CompactString("g")
# s2 = CompactString("zaaaaaaacccaaaa")
# s3 = s1 + s2
# print(s1)
# print(s2)
# print(s3)
# print(s2 < s1)
