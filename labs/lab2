def reverse_list(lst, low=None, high=None):
    """
    :param lst: list[]
    :param low: int
    :param high: int
    :return: None
    """
    if low == None:
        low = 0
    if high == None:
        high = len(lst) - 1
    while low < high:
        lst[low], lst[high] = lst[high], lst[low]
        low += 1
        high -= 1
    return lst
    
#------------------------------------

def move_zeros(nums):
    """
    :param nums: nums[int]
    :return: None
    """
    low = 0
    high = len(nums) - 1
    while low < high:
        if (nums[low] == 0 and nums[high] != 0):
            nums[low], nums[high] = nums[high], nums[low]
            low += 1
            high -= 1
        elif nums[low] != 0 and nums[high] != 0 or (nums[low] != 0 and nums[high] == 0):
            low += 1
        else:
            high -= 1
    return nums

#------------------------------------

def find_missing_a(lst):
    for num in range(len(lst) - 1):
        if num not in lst:
            return num


def find_missing_b(lst):
    """
    :param lst: list[int] (sorted)
    :return: int
    """
    left = 0
    right = len(lst) - 1

    if lst[len(lst) - 1] == right:
        return len(lst)

    while lst[right] - lst[left] != 2:
        mid = (left + right) // 2
        if lst[right] - lst[mid] != right - (mid):
            left = mid
        elif lst[mid] - lst[left] != mid - left:
            right = mid
    return lst[right] - 1


def find_missing_c(lst):
    len_sum = (len(lst) - 1)*len(lst) // 2
    if sum(lst) != len_sum:
        return sum(lst) - len_sum

#------------------------------------

def binary_search(lst, low, high, val):
    """
    :param lst: list[int]
    :param low: int
    :param high: int
    :param val: int
    :return: int(found), None
    """

    if high - low < 0:
        return None

    mid = (low + high) // 2
    if lst[mid] == val:
        return mid
    if val < lst[mid]:
        return binary_search(lst, low, mid - 1, val)
    else:
        return binary_search(lst, mid + 1, high, val)


