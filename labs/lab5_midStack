from DoublyLinkedList import DoublyLinkedList


class MidStack:

    def __init__(self):
        self.data = DoublyLinkedList()
        self.middle = self.data.header

    def __len__(self):
        """
        :return: the number of elements in the stack
        """
        return len(self.data)

    def is_empty(self):
        """
        :return: true if the stack is empty, false otherwise
        """
        return len(self.data) == 0

    def push(self, e):
        """
        adds element, e, to the top of the stack
        """
        self.data.add_last(e)
        if len(self) % 2 == 1:
            self.middle = self.middle.next

    def top(self):
        """
        returns the element at the top of the stack
        raises exception if stack is empty
        """
        if self.is_empty:
            raise Exception("stack is empty")
        return self.data.trailer.prev.data

    def pop(self):
        """
        :return: removes and returns the element at the top of the stack
        raises exception if stack is empty
        """
        if self.is_empty:
            raise Exception("stack is empty")
        return self.data.delete_last()

    def mid_push(self, e):
        """
        adds an element, e, to the middle of the stack
        raises exception if stack is empty
        """
        if self.is_empty:
            raise Exception("stack is empty")
        self.data.add_after(self.middle, e)
        if len(self) % 2 == 1:
            self.middle = self.middle.next
